package ${package}.${moduleName}.${entityName};

import com.alibaba.cola.catchlog.CatchAndLog;
import com.alibaba.cola.dto.MultiResponse;
import com.alibaba.cola.dto.Response;
import com.alibaba.cola.dto.SingleResponse;
import com.baomidou.mybatisplus.extension.plugins.pagination.PageDTO;
import ${package}.${moduleName}.api.${entityClassName}ServiceI;
import ${package}.${moduleName}.${entityName}.executor.${entityClassName}AddCmdExe;
import ${package}.${moduleName}.${entityName}.executor.${entityClassName}DelCmdExe;
import ${package}.${moduleName}.${entityName}.executor.${entityClassName}UpdateCmdExe;
import ${package}.${moduleName}.${entityName}.executor.query.*;
import io.lazyegg.core.page.PageLongResponse;
import ${package}.${moduleName}.dto.*;
import ${package}.${moduleName}.dto.data.${entityClassName}DTO;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.List;


@Service
@CatchAndLog
public class ${entityClassName}ServiceImpl implements ${entityClassName}ServiceI {

    @Resource
    private ${entityClassName}AddCmdExe ${entityName}AddCmdExe;
    @Resource
    private ${entityClassName}DelCmdExe ${entityName}DelCmdExe;

    @Resource
    private ${entityClassName}UpdateCmdExe ${entityName}UpdateCmdExe;
    @Resource
    private ${entityClassName}GetQryExe ${entityName}GetQryExe;
    @Resource
    private ${entityClassName}ListQryExe ${entityName}ListQryExe;
    @Resource
    private ${entityClassName}PageQryExe ${entityName}PageQryExe;
    @Resource
    private ${entityClassName}CountQryExe ${entityName}CountQryExe;

    @Resource
    private ${entityClassName}ListByNameQryExe ${entityName}ListByNameQryExe;

    public Response add${entityClassName}(${entityClassName}AddCmd ${entityName}AddCmd) {
        ${entityName}AddCmdExe.execute(${entityName}AddCmd);
        return Response.buildSuccess();
    }

    @Override
    public MultiResponse<${entityClassName}DTO> listByName(${entityClassName}ListByNameQry ${entityName}ListByNameQry) {
        List<${entityClassName}DTO> execute = ${entityName}ListByNameQryExe.execute(${entityName}ListByNameQry);
        return MultiResponse.of(execute);
    }

    @Override
    public Response remove${entityClassName}(${entityClassName}DelCmd ${entityName}DelCmd) {
        ${entityName}DelCmdExe.execute(${entityName}DelCmd);
        return Response.buildSuccess();
    }

    @Override
    public Response update${entityClassName}(${entityClassName}UpdateCmd cmd) {
        ${entityName}UpdateCmdExe.execute(cmd);
        return Response.buildSuccess();
    }

    @Override
    public SingleResponse<${entityClassName}DTO> get${entityClassName}(${entityClassName}GetQry qry) {
        ${entityClassName}DTO execute = ${entityName}GetQryExe.execute(qry);
        return SingleResponse.of(execute);
    }

    @Override
    public MultiResponse<${entityClassName}DTO> list${entityClassName}(${entityClassName}ListQry listQry) {
        List<${entityClassName}DTO> execute = ${entityName}ListQryExe.execute(listQry);
        return MultiResponse.of(execute);
    }

    @Override
    public PageLongResponse<${entityClassName}DTO> page${entityClassName}(${entityClassName}PageQry pageQry) {
        PageDTO<${entityClassName}DO> page = ${entityName}PageQryExe.execute(pageQry);
        List<${entityClassName}DO> records = page.getRecords();
        ArrayList<${entityClassName}DTO> ${entityName}DTOS = new ArrayList<>();
        for (${entityClassName}DO record : records) {
            ${entityClassName}DTO e = new ${entityClassName}DTO();
            BeanUtils.copyProperties(record, e);
            ${entityName}DTOS.add(e);
        }
        return PageLongResponse.of(${entityName}DTOS, page.getTotal(), page.getSize(), page.getCurrent());
    }

    @Override
    public SingleResponse<${entityClassName}DTO> count${entityClassName}(${entityClassName}CountQry countQry) {
        ${entityClassName}DTO execute = ${entityName}CountQryExe.execute(countQry);
        return SingleResponse.of(execute);
    }


}
